#!/bin/sh -x

set -e

usage ()
{
    echo "do_build [ --no-prefix ] [ --prefix <prefix> ] <build configuration>"
    exit 1;
}

parse_args ()
{
    noprefix=false
    if [ "$1" = "--no-prefix" ]; then
	noprefix=true
	shift
    elif [ "$1" = "--prefix" ]; then
	user_prefix="$2"
	shift 2
    fi

    if [ $# -ne 1 ]; then
	usage
    fi

    cfg="$1"
}

detect_ada_support ()
{
    ada_supported=false
    if gnat > /dev/null; then
	# To get gnat support
	local v
	v=$(gnat \
	    | grep GNAT \
	    | awk '{print $2}')
	local vbase
	vbase=$(echo "$v" \
	    | sed 's%\([0-9]\.[0-9]*\).*%\1%')
	local cc="/usr/bin/gcc-$vbase"
	if [ -f "$cc" ]; then
	    ada_supported=true
	    ada_cc="$cc"
	fi
    fi
}

set_arch_flags ()
{
    local uname_m
    uname_m=$(uname -m)
    local uname_i
    uname_i=$(uname -i)
    local uname_p
    uname_p=$(uname -p)

    local native
    if [ "$uname_m" = "$uname_i" ] \
	&& [ "$uname_i" = "$uname_p" ]; then
	native="$uname_m"
    fi

    local arch_flags
    local arm_arch_flags="
--build=arm-linux-gnueabihf
--host=arm-linux-gnueabihf
--target=arm-linux-gnueabihf
--enable-multiarch
--disable-multilib
--disable-sjlj-exceptions
--with-arch=armv7-a
--with-fpu=vfpv3-d16
--with-float=hard
--with-mode=thumb
--with-system-zlib
--disable-libmudflap
--disable-libitm
--disable-libquadmath
--with-sysroot=/
--enable-threads=posix
--enable-shared"

    case "$native" in
	"armv7l")
	    arch_flags="$arm_arch_flags"
	    # MK80LE overheats during bootstrap build, scale down number of palllel
	    # jobs.
	    parallel=$((parallel / 2))
	    ;;
	*)
	    arch_flags=""
	    ;;
    esac

    configureflags="$configureflags $arch_flags"
}

apply_cfg ()
{
    cfg_prefix="$cfg"
    if [ "$cfg" = "release" ]; then
	configureflags="--enable-checking=release"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "dbg" ]; then
	configureflags="--enable-checking=yes,rtl"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "darwin10-ada" ]; then
	target="x86_64-apple-darwin10"
	configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=ada"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "hppa64" ]; then
	target="hppa64-hp-hpux11.11"
	configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "check" ]; then
	configureflags="--enable-checking=yes,rtl --enable-languages=$all_supported_languages"
    elif [ "$cfg" = "check-noada" ]; then
	cfg_prefix="check/"
	configureflags="--enable-checking=yes,rtl --enable-languages=c,fortran,java,objc,c++"
    elif [ "$cfg" = "nobootstrap" ]; then
	configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=$all_supported_languages"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "nobootstrap-noada" ]; then
	cfg_prefix="nobootstrap/"
	configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c,fortran,java,objc,c++"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "lean" ]; then
	configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c,fortran,c++"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "lean-fortran" ]; then
	configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=fortran"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "lean-c++" ]; then
	configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c,c++"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "lean-c" ]; then
	configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c" #--disable-libcilkrts
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "bootstrap-c" ]; then
	configureflags="--enable-checking=yes,rtl --enable-languages=c"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "bootstrap-c-nomultilib" ]; then
	configureflags="--enable-checking=yes,rtl --enable-languages=c --disable-multilib"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "bootstrap-c-opt" ]; then
	configureflags="--enable-checking=yes,rtl --enable-languages=c"
    elif [ "$cfg" = "bootstrap-c-release" ]; then
	configureflags="--enable-checking=release --enable-languages=c"
    elif [ "$cfg" = "bootstrap-fortran-release" ]; then
	configureflags="--enable-checking=release --enable-languages=fortran"
    elif [ "$cfg" = "bootstrap-c++" ]; then
	configureflags="--enable-checking=yes,rtl --enable-languages=c,c++"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "ada" ]; then
	configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c,c++,ada"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "avr" ]; then
	target=avr-linux-gnu
	#fakebin=true
	binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
	export PATH="$binutils:$PATH"
	configureflags="--enable-checking=yes,rtl --enable-languages=c"
	configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "bfin" ]; then
	target=bfin-unknown-elf
	fakebin=true
	configureflags="--enable-checking=yes,rtl --enable-languages=c"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "arm" ]; then
	target="arm-linux-gnueabi"
	fakebin=false
	configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
	binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
	export PATH="$binutils:$PATH"
	configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "alpha" ]; then
	target="alphaev68-unknown-linux-gnu"
	fakebin=true
	configureflags="--enable-checking=yes,rtl --enable-languages=c --disable-tls --disable-threads"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "alpha2" ]; then
	target="alpha-unknown-linux-gnu"
	fakebin=true
	configureflags="--enable-checking=yes,rtl --enable-languages=c --disable-tls --disable-threads"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "spu" ]; then
	target="spu-elf"
	fakebin=true
	configureflags="--enable-checking=yes,rtl --enable-languages=c --disable-tls --disable-threads"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "ia64" ]; then
	target="ia64-linux-gnu"
	fakebin=false
	configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
	binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
	export PATH="$binutils:$PATH"
	configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "mips" ]; then
	target="mips-linux-gnu"
	fakebin=false
	configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
	binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
	export PATH="$binutils:$PATH"
	configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "hppa" ]; then
	target="hppa2.0w-linux-gnu"
	fakebin=false
	configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
	binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
	export PATH="$binutils:$PATH"
	configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "ppc" ]; then
	target="ppc-linux-gnu"
	fakebin=false
	configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
	binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
	export PATH="$binutils:$PATH"
	configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "s390" ]; then
	target="s390-linux-gnu"
	fakebin=false
	configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
	binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
	export PATH="$binutils:$PATH"
	configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "sh" ]; then
	target="sh-linux-gnu"
	fakebin=false
	configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
	binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
	export PATH="$binutils:$PATH"
	configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "sparc" ]; then
	target="sparc-linux-gnu"
	fakebin=false
	configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
	binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
	export PATH="$binutils:$PATH"
	configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "aarch64" ]; then
	target="aarch64-linux-gnu"
	fakebin=false
	configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
	binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
	export PATH="$binutils:$PATH"
	configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "mips64" ]; then
	target="mips64-linux-gnu"
	#fakebin=true
	configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "mips64el" ]; then
	target="mips64el-linux-gnu"
	#fakebin=true
	configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
	ALL_CFLAGS="-g3 -O0 -dH"
    elif [ "$cfg" = "hppa" ]; then
	target="hppa-linux"
	configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c,java --disable-tls --disable-threads --disable-shared --disable-libquadmath --disable-libssp --without-libffi --disable-libgomp"
	ALL_CFLAGS="-g3 -O0 -dH"
	binutils=/home/vries/upstream/binutils/build/2.23.1/$target/install/bin
	export PATH="$binutils:$PATH"
	configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
    elif [  "$cfg" = "pgo" ]; then
	maketarget=profiledbootstrap
    elif [  "$cfg" = "i686-pgo" ]; then
	# didn't get this to work
	maketarget=profiledbootstrap
	BOOT_CFLAGS="-m32"
	CFLAGS_FOR_TARGET="-m32"
    elif [ "$cfg" = "lean-c-old" ]; then
	configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c"
	ALL_CFLAGS="-g3 -O0 -dH"
	# https://dev.openwrt.org/ticket/13039
	makeflags="$makeflags MAKEINFO=missing"
	makeflags="$makeflags POD2MAN=/bin/true"
    elif [ "$cfg" = "lean-old" ]; then
	configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c,c++,fortran"
	ALL_CFLAGS="-g3 -O0 -dH"
	# https://dev.openwrt.org/ticket/13039
	makeflags="$makeflags MAKEINFO=missing"
	makeflags="$makeflags POD2MAN=/bin/true"
    fi

    if [ "$target" != "" ]; then
	configureflags="$configureflags --target=$target"
    fi
}

do_fakebin ()
{
    local binutils="${install}/binutils"
    if [ ! -d ${binutils} ]; then
	mkdir -p ${binutils}
	cp /bin/true ${binutils}/${target}-ar
	cp /home/vries/gcc_versions/scripts/dummyas ${binutils}/${target}-as
	cp /home/vries/gcc_versions/scripts/dummyld ${binutils}/${target}-ld
	cp /home/vries/gcc_versions/scripts/dummynm ${binutils}/${target}-nm
	#cp /bin/true ${binutils}/${target}-nm
	cp /bin/touch ${binutils}/${target}-ranlib
	cp /bin/true ${binutils}/${target}-strip
    fi
    export PATH="${binutils}:$PATH"
    configureflags="$configureflags --with-gnu-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
}

configure_make_install ()
{
    rm -Rf ${build} ${install}
    mkdir -p ${build} ${install}

    if $fakebin; then
	do_fakebin
    fi

    cd ${build}

    ${p}/src/configure \
	--prefix=${install} \
	--with-cloog=${i} \
	--with-ppl=${i} \
	--with-gmp=${i} \
	--with-mpfr=${i} \
	--with-mpc=${i} \
	--with-isl=${i} \
	${configureflags} \
	> CONFIGURELOG 2>&1

    makeflags="$makeflags -j${parallel}"

    make \
	${ALL_CFLAGS:+BOOT_CFLAGS="${ALL_CFLAGS}" CFLAGS="${ALL_CFLAGS}" \
	CXXFLAGS="${ALL_CFLAGS}" STAGE1_CFLAGS="${ALL_CFLAGS}"} \
	${CFLAGS_FOR_BUILD:+CFLAGS_FOR_BUILD="${CFLAGS_FOR_BUILD}"} \
	${CFLAGS:+CFLAGS="${CFLAGS}"} \
	${BOOT_CFLAGS:+BOOT_CFLAGS="${BOOT_CFLAGS}"} \
	${STAGE1_CFLAGS:+STAGE1_CFLAGS="${STAGE1_CFLAGS}"} \
	${CFLAGS_FOR_TARGET:+CFLAGS_FOR_TARGET="${CFLAGS_FOR_TARGET}"} \
	${makeflags} ${maketarget} \
	> MAKELOG 2>&1

    make \
	install \
	> INSTALLLOG 2>&1
}

fixup_multi_arch ()
{
    # outdated trick. now fixed by setting LIBRARY_PATH in set_infra
    # ensure linker can find crti
    (
	cd /usr/lib
	os=$(cd x86_64-linux-gnu ; echo crt*.o)
	for o in $os; do
	    if [ ! -e $o ]; then
		echo missing /usr/lib/$o
		exit 1
	    fi
	done
    )
}


set_paths ()
{
    local prefix
    if $noprefix; then
	prefix=""
    elif [ "$user_prefix" != "" ]; then
	prefix="$user_prefix"
    else
	prefix="$cfg_prefix"
    fi

    # Ensure trailing '/'
    prefix=$(echo $prefix \
	| sed 's%/*$%/%')

    p=$(pwd)

    build=${p}/${prefix}build
    install=${p}/${prefix}install
    src=${p}/src

    if [ ! -d ${src} ]; then
	echo "sources not found: ${src}"
	exit 1
    fi
}

main ()
{
    parse_args "$@"

    l=$(cd $(dirname $0); pwd)
    . ${l}/set_infra
    . ${l}/set_site

    target=
    fakebin=false

    detect_ada_support
    all_supported_languages="c,c++,fortran,go,java,objc,obj-c++"
    if $ada_supported; then
	all_supported_languages="$all_supported_languages,ada"
    fi

    if $ada_supported; then
	export CC="$ada_cc"
    else
	export CC=/usr/bin/gcc
    fi


    apply_cfg

    set_arch_flags

    set_paths

    configure_make_install
}

main "$@"
