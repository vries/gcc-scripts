#!/bin/sh -x

set -e

usage ()
{
    echo "do_build [ --no-prefix ] [ --prefix <prefix> ] <build configuration>"
    exit 1;
}

noprefix=false
if [ "$1" = "--no-prefix" ]; then
    noprefix=true
    shift
elif [ "$1" = "--prefix" ]; then
    user_prefix="$2"
    shift 2
elif [ $# -ne 0 ]; then
    usage
fi

cfg="$1"

l=$(cd $(dirname $0); pwd)
. ${l}/set_infra
. ${l}/set_site

target=
fakebin=false

export CC=/usr/bin/gcc

ada_supported=false
if gnat > /dev/null; then
    # To get gnat support
    v=$(gnat \
	| grep GNAT \
	| awk '{print $2}')
    vbase=$(echo "$v" \
	| sed 's%\([0-9]\.[0-9]*\).*%\1%')
    if [ -f /usr/bin/gcc-$vbase ]; then
	ada_supported=true
	export CC=/usr/bin/gcc-$vbase
    fi
fi

all_supported_languages="c,c++,fortran,go,java,objc,obj-c++"
if $ada_supported; then
    all_supported_languages="$all_supported_languages,ada"
fi

uname_m=$(uname -m)
uname_i=$(uname -i)
uname_p=$(uname -p)

if [ "$uname_m" = "$uname_i" ] \
    && [ "$uname_i" = "$uname_p" ]; then
    native="$uname_m"
fi

arm_arch_flags="
--build=arm-linux-gnueabihf
--host=arm-linux-gnueabihf
--target=arm-linux-gnueabihf
--enable-multiarch
--disable-multilib
--disable-sjlj-exceptions
--with-arch=armv7-a
--with-fpu=vfpv3-d16
--with-float=hard
--with-mode=thumb
--with-system-zlib
--disable-libmudflap
--disable-libitm
--disable-libquadmath
--with-sysroot=/
--enable-threads=posix
--enable-shared"

case "$native" in
    "armv7l")
	arch_flags="$arm_arch_flags"
	# MK80LE overheats during bootstrap build, scale down number of palllel
	# jobs.
	parallel=$((parallel / 2))
	;;
    *)
	arch_flags=""
	;;
esac

makeflags=-j${parallel}

if [ "$cfg" = "release" ]; then
    prefix="release/"
    configureflags="--enable-checking=release"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "dbg" ]; then
    prefix="dbg/"
    configureflags="--enable-checking=yes,rtl"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "darwin10-ada" ]; then
    target="x86_64-apple-darwin10"
    prefix="darwin10-ada/"
    configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=ada"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "hppa64" ]; then
    target="hppa64-hp-hpux11.11"
    prefix="hppa64/"
    configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "check" ]; then
    prefix="check/"
    configureflags="--enable-checking=yes,rtl --enable-languages=$all_supported_languages"
elif [ "$cfg" = "check-noada" ]; then
    prefix="check/"
    configureflags="--enable-checking=yes,rtl --enable-languages=c,fortran,java,objc,c++"
elif [ "$cfg" = "nobootstrap" ]; then
    prefix="nobootstrap/"
    configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=$all_supported_languages"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "nobootstrap-noada" ]; then
    prefix="nobootstrap/"
    configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c,fortran,java,objc,c++"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "lean" ]; then
    prefix="lean/"
    configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c,fortran,c++"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "lean-fortran" ]; then
    prefix="lean-fortran/"
    configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=fortran"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "lean-c++" ]; then
    prefix="lean-c++/"
    configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c,c++"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "lean-c" ]; then
    prefix="lean-c/"
    configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c" #--disable-libcilkrts
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "bootstrap-c" ]; then
    prefix="bootstrap-c/"
    configureflags="--enable-checking=yes,rtl --enable-languages=c"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "bootstrap-c++" ]; then
    prefix="bootstrap-c++/"
    configureflags="--enable-checking=yes,rtl --enable-languages=c,c++"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "ada" ]; then
    prefix="ada/"
    configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c,c++,ada"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "avr" ]; then
    prefix="avr/"
    target=avr-linux-gnu
  #fakebin=true
    binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
    export PATH="$binutils:$PATH"
    configureflags="--enable-checking=yes,rtl --enable-languages=c"
    configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "bfin" ]; then
    prefix="bfin/"
    target=bfin-unknown-elf
    fakebin=true
    configureflags="--enable-checking=yes,rtl --enable-languages=c"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "arm" ]; then
    prefix="arm/"
    target="arm-linux-gnueabi"
    fakebin=false
    configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
    binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
    export PATH="$binutils:$PATH"
    configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "ia64" ]; then
    prefix="ia64/"
    target="ia64-linux-gnu"
    fakebin=false
    configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
    binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
    export PATH="$binutils:$PATH"
    configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "mips" ]; then
    prefix="mips/"
    target="mips-linux-gnu"
    fakebin=false
    configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
    binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
    export PATH="$binutils:$PATH"
    configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "hppa" ]; then
    prefix="hppa/"
    target="hppa2.0w-linux-gnu"
    fakebin=false
    configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
    binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
    export PATH="$binutils:$PATH"
    configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "ppc" ]; then
    prefix="ppc/"
    target="ppc-linux-gnu"
    fakebin=false
    configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
    binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
    export PATH="$binutils:$PATH"
    configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "s390" ]; then
    prefix="s390/"
    target="s390-linux-gnu"
    fakebin=false
    configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
    binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
    export PATH="$binutils:$PATH"
    configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "sh" ]; then
    prefix="sh/"
    target="sh-linux-gnu"
    fakebin=false
    configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
    binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
    export PATH="$binutils:$PATH"
    configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "sparc" ]; then
    prefix="sparc/"
    target="sparc-linux-gnu"
    fakebin=false
    configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
    binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
    export PATH="$binutils:$PATH"
    configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "aarch64" ]; then
    prefix="aarch64/"
    target="aarch64-linux-gnu"
    fakebin=false
    configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
    binutils="/home/vries/gcc_versions/binutils/${target}-2.24/install/bin"
    export PATH="$binutils:$PATH"
    configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "mips64" ]; then
    prefix="mips64/"
    target="mips64-linux-gnu"
  #fakebin=true
    configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "mips64el" ]; then
    prefix="mips64el/"
    target="mips64el-linux-gnu"
  #fakebin=true
    configureflags="--enable-checking=yes,rtl --enable-languages=c,c++ --disable-tls --disable-threads"
    ALL_CFLAGS="-g3 -O0 -dH"
elif [ "$cfg" = "hppa" ]; then
    prefix="hppa/"
    target="hppa-linux"
    configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c,java --disable-tls --disable-threads --disable-shared --disable-libquadmath --disable-libssp --without-libffi --disable-libgomp"
    ALL_CFLAGS="-g3 -O0 -dH"
    binutils=/home/vries/upstream/binutils/build/2.23.1/$target/install/bin
    export PATH="$binutils:$PATH"
    configureflags="$configureflags --with-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
elif [  "$cfg" = "pgo" ]; then
    prefix="pgo/"
    maketarget=profiledbootstrap
elif [  "$cfg" = "i686-pgo" ]; then
  # didn't get this to work
    prefix="i686-pgo/"
    maketarget=profiledbootstrap
    BOOT_CFLAGS="-m32"
    CFLAGS_FOR_TARGET="-m32"
elif [ "$cfg" = "lean-c-old" ]; then
    prefix="lean-c-old/"
    configureflags="--disable-bootstrap --enable-checking=yes,rtl --enable-languages=c"
    ALL_CFLAGS="-g3 -O0 -dH"
  # https://dev.openwrt.org/ticket/13039
    makeflags="$makeflags MAKEINFO=missing"
    makeflags="$makeflags POD2MAN=/bin/true"
fi

configureflags="$configureflags $arch_flags"

if $noprefix; then
    prefix=""
elif [ "$user_prefix" != "" ]; then
    prefix="$user_prefix"
fi

# Ensure trailing '/'
prefix=$(echo $prefix \
    | sed 's%/*$%/%')

p=$(pwd)

build=${p}/${prefix}build
install=${p}/${prefix}install
src=${p}/src

if [ ! -d ${src} ]; then
    echo "sources not found: ${src}"
    exit 1
fi

rm -Rf ${build} ${install}
mkdir -p ${build} ${install}

if [ "$target" != "" ]; then
    configureflags="$configureflags --target=$target"
fi

if $fakebin; then
    binutils=${p}/${prefix}binutils
    if [ ! -d ${binutils} ]; then
	mkdir -p ${binutils}
	cp /bin/true ${binutils}/${target}-ar
	cp /home/vries/gcc_versions/script/dummyas ${binutils}/${target}-as
	cp /home/vries/gcc_versions/script/dummyld ${binutils}/${target}-ld
	cp /home/vries/gcc_versions/script/dummynm ${binutils}/${target}-nm
    #cp /bin/true ${binutils}/${target}-nm
	cp /bin/touch ${binutils}/${target}-ranlib
	cp /bin/true ${binutils}/${target}-strip
    fi
    export PATH="${binutils}:$PATH"
    configureflags="$configureflags --with-gnu-as=${binutils}/${target}-as --with-ld=${binutils}/${target}-ld"
fi

cd ${build}


# outdated trick. now fixed by setting LIBRARY_PATH in set_infra
# ensure linker can find crti
true || (
    cd /usr/lib
    os=$(cd x86_64-linux-gnu ; echo crt*.o)
    for o in $os; do
	if [ ! -e $o ]; then
	    echo missing /usr/lib/$o
	    exit 1
	fi
    done
)

${p}/src/configure \
    --prefix=${install} \
    --with-cloog=${i} \
    --with-ppl=${i} \
    --with-gmp=${i} \
    --with-mpfr=${i} \
    --with-mpc=${i} \
    --with-isl=${i} \
    ${configureflags} \
    > CONFIGURELOG 2>&1

make \
    ${ALL_CFLAGS:+BOOT_CFLAGS="${ALL_CFLAGS}" CFLAGS="${ALL_CFLAGS}" CXXFLAGS="${ALL_CFLAGS}" STAGE1_CFLAGS="${ALL_CFLAGS}"} \
    ${CFLAGS_FOR_BUILD:+CFLAGS_FOR_BUILD="${CFLAGS_FOR_BUILD}"} \
    ${CFLAGS:+CFLAGS="${CFLAGS}"} \
    ${BOOT_CFLAGS:+BOOT_CFLAGS="${BOOT_CFLAGS}"} \
    ${STAGE1_CFLAGS:+STAGE1_CFLAGS="${STAGE1_CFLAGS}"} \
    ${CFLAGS_FOR_TARGET:+CFLAGS_FOR_TARGET="${CFLAGS_FOR_TARGET}"} \
    ${makeflags} ${maketarget} \
    > MAKELOG 2>&1

make \
    install \
    > INSTALLLOG 2>&1
